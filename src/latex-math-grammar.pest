

// Control Characters & Trivia  ---------------------------------------------------------------------------------------
control_character      = { "\\" }
space_character        = { " " }
tab_character          = { "\t" }
whitespace             = _{ (space_character | tab_character | linebreak_character)+ }
newline_character      = { "\n" }
caret_return_character = { "\r" }
linebreak_character    = { newline_character | caret_return_character | (newline_character ~ caret_return_character) }

// Trivial math operators ---------------------------------------------------------------------------------------------
operator_factorial     = { "!" }
operator_equal         = { "=" }
operator_plus          = { "+" }
operator_minus         = { "-" | "â€“" }
operator_multiplier    = { "*" }
operator_division      = { "/" }

// Trivial elements
number                 = { !control_character ~ ('0'..'9')+ ~ "."? ~ ('0'..'9')* }   // TODO decimal points?
letter_latin           = { !control_character ~ ('a'..'z' | 'A'..'Z') }

// Greek Letters ------------------------------------------------------------------------------------------------------
letter_greek           = {
                          (letter_alpha   |
                           letter_beta    |
                           letter_pi      |
                           letter_gamma   |
                           letter_rho     |
                           letter_delta   |
                           letter_sigma   |
                           letter_epsilon |
                           letter_phi     |
                           letter_psi     |
                           letter_hbar) ~ !letter_latin
                         }

// Greek Letter Classes -----------------------------------------------------------------------------------------------
letter_alpha           = { letter_alpha_lower | letter_alpha_upper }
letter_beta            = { letter_beta_lower | letter_beta_upper }
letter_pi              = { letter_pi_lower | letter_pi_upper }
letter_gamma           = { letter_gamma_lower | letter_gamma_upper }
letter_rho             = { letter_rho_lower | letter_rho_upper }
letter_delta           = { letter_delta_lower | letter_delta_upper }
letter_sigma           = { letter_sigma_lower | letter_sigma_upper }
letter_epsilon         = { letter_epsilon_lower | letter_epsilon_upper }
letter_phi             = { letter_phi_lower | letter_phi_upper }
letter_psi             = { letter_psi_lower | letter_psi_upper }
letter_hbar            = { control_character ~ "hbar" }

// Lower-case Greek Letters -------------------------------------------------------------------------------------------
letter_alpha_lower     = { control_character ~ "alpha" }
letter_beta_lower      = { control_character ~ "beta" }
letter_pi_lower        = { control_character ~ "pi" }
letter_gamma_lower     = { control_character ~ "gamma" }
letter_rho_lower       = { control_character ~ "rho" }
letter_delta_lower     = { control_character ~ "delta" }
letter_sigma_lower     = { control_character ~ "sigma" }
letter_epsilon_lower   = { control_character ~ "epsilon" }
letter_phi_lower       = { control_character ~ "phi" }
letter_psi_lower       = { control_character ~ "psi" }

// Upper-case Greek Letters -------------------------------------------------------------------------------------------
letter_alpha_upper     = { control_character ~ "Alpha" }
letter_beta_upper      = { control_character ~ "Beta" }
letter_pi_upper        = { control_character ~ "Pi" }
letter_gamma_upper     = { control_character ~ "Gamma" }
letter_rho_upper       = { control_character ~ "Rho" }
letter_delta_upper     = { control_character ~ "Delta" }
letter_sigma_upper     = { control_character ~ "Sigma" }
letter_epsilon_upper   = { control_character ~ "Epsilon" }
letter_phi_upper       = { control_character ~ "Phi" }
letter_psi_upper       = { control_character ~ "Psi" }

// Syntax separators --------------------------------------------------------------------------------------------------
separator              = { whitespace | separator_block }
separator_block        = { (!control_character ~ "{") ~ expression ~ (!control_character ~ "}") }


// Math separators ----------------------------------------------------------------------------------------------------
parenthesis            = { 
                           par_round_left   |
                           par_round_right  |
                           par_square_left  |
                           par_square_right |
                           par_curly_left   |
                           par_curly_right
                         }
par_round_left         = { control_character? ~ "(" }
par_round_right        = { control_character? ~ ")" }
par_square_left        = { control_character? ~ "[" }
par_square_right       = { control_character? ~ "]" }
par_curly_left         = { control_character ~ "{" }
par_curly_right        = { control_character ~ "}" }

// Expression ---------------------------------------------------------------------------------------------------------
intro                  = { begin_end | begin_end_un | dollardollar | dollar | dollarsquare }
dollar                 = { "$" ~ expression ~ "$" }
dollardollar           = { "$$" ~ expression ~ "$$" }
dollarsquare           = { control_character ~ "[" ~ expression ~ control_character ~ "]" }
begin_end              = { control_character ~ "begin{equation}" ~ expression ~ control_character ~ "end{equation}" }
begin_end_un           = { control_character ~ "begin{equation*}" ~ expression ~ control_character ~ "end{equation*}" }




