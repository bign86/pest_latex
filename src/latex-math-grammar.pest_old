// # LaTeX Formula Grammar
// **Authors:** Mario Hlaca, Jevgeni Tarassov.
//
// Top level rule is `expression`.

expression             = { (expression_element | whitespace)* }
expression_element     = { environment | simple_element }
simple_element         = { operator | control_statement | single_term }
single_term            = { letter | number | punctuation }
punctuation            = {
    "," | "." | ";" | "(" | ")" | "[" | "]" | "|"
}

// Control Statement Grammar
control_statement      = { control_character ~ control_statement_name ~ control_statement_body }
control_statement_name = {
    !"begin" ~
    !"end" ~
    letter_latin+
}
control_statement_body = { "{" ~ (expression_element | whitespace)+ ~ "}" }

// Environment Grammar
environment          = { environment_begin ~ environment_content ~ environment_end }
environment_begin    = { control_character ~ "begin" ~ "{" ~ PUSH(environment_name) ~ "}" }
environment_end      = { control_character ~ "end" ~ "{" ~ POP ~ "}" }
environment_peek_end = { control_character ~ "end" ~ "{" ~ PEEK ~ "}" }
environment_name     = { letter_latin+ }
environment_content  = {
    (
        whitespace* ~
        !environment_peek_end ~ (environment_expression_array | expression) ~
        whitespace*
    )+
}
environment_expression_array = {
    expression ~ ("&" ~ expression)* ~ "\\\\"
}

// Control Characters & Meta Characters
control_character           = _{ "\\" }
whitespace                  = _{ (space_character | tab_character | linebreak_character)+ }
space_character             = _{ " " }
tab_character               = _{ "\t" }
linebreak_character         = _{
    newline_character |
    caret_return_character |
    (caret_return_character ~ newline_character)
}
newline_character           = _{ "\n" }
caret_return_character      = _{ "\r" }

operator = {
    operator_infix |
    operator_postfix |
    operator_exp |
    operator_subscript |
    operator_integral
}
operator_infix = {
    "=" | "+" | "-" | "â€“" | "*" | "/"
}
operator_postfix  = { "!" }
operator_argument = { control_statement_body | single_term }

// Exponentiation Operator
operator_exp = {
    operator_exp_base ~ "^" ~ operator_exp_exponent
}
operator_exp_base     = { operator_argument }
operator_exp_exponent = { operator_argument }

// Subscript Operator
operator_subscript = {
    operator_subscript_base ~ "_" ~ operator_subscript_index
}
operator_subscript_base  = { operator_argument }
operator_subscript_index = { operator_argument }

// Integral
operator_integral = {
    control_character ~ "int" ~
    whitespace* ~
    (
        (operator_integral_subscript ~ whitespace* ~ operator_integral_superscript) |
        (operator_integral_superscript ~ whitespace* ~ operator_integral_subscript)
    ) ~
    whitespace* ~
    operator_integral_body
}
operator_integral_subscript = { "_" ~ operator_argument }
operator_integral_superscript = { "^" ~ operator_argument }
operator_integral_body = { operator_argument }

// Basics -------------------------------------------------------------------------------------------------------------
number = { ('0'..'9')+ ~ "."? ~ ('0'..'9')* }
letter = { letter_latin | letter_greek }

// Latin Letters ------------------------------------------------------------------------------------------------------
letter_latin = _{ 'a'..'z' | 'A'..'Z' }

// Greek Letters ------------------------------------------------------------------------------------------------------
letter_greek = {
    letter_alpha |
    letter_beta  |
    letter_gamma |
	letter_delta |
	letter_epsilon |
    letter_zeta |
    letter_eta   |
    letter_theta |
    letter_iota  |
    letter_kappa |
    letter_lambda |
    letter_mu    |
    letter_nu    |
    letter_xi    |
    letter_omicron |
    letter_pi    |
	letter_rho   |
	letter_sigma |
    letter_tau |
    letter_upsilon |
    letter_phi |
    letter_chi |
    letter_psi |
    letter_omega
}

// Greek Letter Classes -----------------------------------------------------------------------------------------------
letter_alpha   = { letter_alpha_lower | letter_alpha_upper }
letter_beta    = { letter_beta_lower | letter_beta_upper }
letter_gamma   = { letter_gamma_lower | letter_gamma_upper }
letter_delta   = { letter_delta_lower | letter_delta_upper }
letter_epsilon = { letter_epsilon_lower | letter_epsilon_upper }
letter_zeta    = { letter_zeta_lower | letter_zeta_upper }
letter_eta     = { letter_eta_lower | letter_eta_upper }
letter_theta   = { letter_theta_lower | letter_theta_upper }
letter_iota    = { letter_iota_lower | letter_iota_upper }
letter_kappa   = { letter_kappa_lower | letter_kappa_upper }
letter_lambda  = { letter_lambda_lower | letter_lambda_upper }
letter_mu      = { letter_mu_lower | letter_mu_upper }
letter_nu      = { letter_nu_lower | letter_nu_upper }
letter_xi      = { letter_xi_lower | letter_xi_upper }
letter_omicron = { letter_omicron_lower | letter_omicron_upper }
letter_pi      = { letter_pi_lower | letter_pi_upper }
letter_rho     = { letter_rho_lower | letter_rho_upper }
letter_sigma   = { letter_sigma_lower | letter_sigma_upper }
letter_tau     = { letter_tau_lower | letter_tau_upper }
letter_upsilon = { letter_upsilon_lower | letter_upsilon_upper }
letter_phi     = { letter_phi_lower | letter_phi_upper }
letter_chi     = { letter_chi_lower | letter_chi_upper }
letter_psi     = { letter_psi_lower | letter_psi_upper }
letter_omega   = { letter_omega_lower | letter_omega_upper }

// Lower-case Greek Letters -------------------------------------------------------------------------------------------
letter_alpha_lower   = { control_character ~ "alpha" ~ !letter_latin }
letter_beta_lower    = { control_character ~ "beta " ~ !letter_latin }
letter_gamma_lower   = { control_character ~ "gamma" ~ !letter_latin }
letter_delta_lower   = { control_character ~ "delta" ~ !letter_latin }
letter_epsilon_lower = { control_character ~ "epsilon" ~ !letter_latin }
letter_zeta_lower    = { control_character ~ "zeta" ~ !letter_latin }
letter_eta_lower     = { control_character ~ "eta  " ~ !letter_latin }
letter_theta_lower   = { control_character ~ "theta" ~ !letter_latin }
letter_iota_lower    = { control_character ~ "iota " ~ !letter_latin }
letter_kappa_lower   = { control_character ~ "kappa" ~ !letter_latin }
letter_lambda_lower  = { control_character ~ "lambda" ~ !letter_latin }
letter_mu_lower      = { control_character ~ "mu" ~ !letter_latin }
letter_nu_lower      = { control_character ~ "nu" ~ !letter_latin }
letter_xi_lower      = { control_character ~ "xi" ~ !letter_latin }
letter_omicron_lower = { control_character ~ "omicron" ~ !letter_latin }
letter_pi_lower      = { control_character ~ "pi" ~ !letter_latin }
letter_rho_lower     = { control_character ~ "rho" ~ !letter_latin }
letter_sigma_lower   = { control_character ~ "sigma" ~ !letter_latin }
letter_tau_lower     = { control_character ~ "tau" ~ !letter_latin }
letter_upsilon_lower = { control_character ~ "upsilon" ~ !letter_latin }
letter_phi_lower     = { control_character ~ "phi" ~ !letter_latin }
letter_chi_lower     = { control_character ~ "chi" ~ !letter_latin }
letter_psi_lower     = { control_character ~ "psi" ~ !letter_latin }
letter_omega_lower   = { control_character ~ "omega" ~ !letter_latin }


// Upper-case Greek Letters -------------------------------------------------------------------------------------------
letter_alpha_upper   = { control_character ~ "Alpha" ~ !letter_latin }
letter_beta_upper    = { control_character ~ "Beta " ~ !letter_latin }
letter_gamma_upper   = { control_character ~ "Gamma" ~ !letter_latin }
letter_delta_upper   = { control_character ~ "Delta" ~ !letter_latin }
letter_epsilon_upper = { control_character ~ "Epsilon" ~ !letter_latin }
letter_zeta_upper    = { control_character ~ "Zeta" ~ !letter_latin }
letter_eta_upper     = { control_character ~ "Eta  " ~ !letter_latin }
letter_theta_upper   = { control_character ~ "Theta" ~ !letter_latin }
letter_iota_upper    = { control_character ~ "Iota " ~ !letter_latin }
letter_kappa_upper   = { control_character ~ "Kappa" ~ !letter_latin }
letter_lambda_upper  = { control_character ~ "Lambda" ~ !letter_latin }
letter_mu_upper      = { control_character ~ "Mu" ~ !letter_latin }
letter_nu_upper      = { control_character ~ "Nu" ~ !letter_latin }
letter_xi_upper      = { control_character ~ "Xi" ~ !letter_latin }
letter_omicron_upper = { control_character ~ "Omicron" ~ !letter_latin }
letter_pi_upper      = { control_character ~ "Pi" ~ !letter_latin }
letter_rho_upper     = { control_character ~ "Rho" ~ !letter_latin }
letter_sigma_upper   = { control_character ~ "Sigma" ~ !letter_latin }
letter_tau_upper     = { control_character ~ "Tau" ~ !letter_latin }
letter_upsilon_upper = { control_character ~ "Upsilon" ~ !letter_latin }
letter_phi_upper     = { control_character ~ "Phi" ~ !letter_latin }
letter_chi_upper     = { control_character ~ "Chi" ~ !letter_latin }
letter_psi_upper     = { control_character ~ "Psi" ~ !letter_latin }
letter_omega_upper   = { control_character ~ "Omega" ~ !letter_latin }


// Misceleaneous Symbols
dots                   = { dots_character | dot_character }
dots_character         = { control_character ~ ("dots" | "ldots") }
dot_character          = { control_character ~ "cdot" }
